weekday_ins_upper = quantile(Total_inside_ves_dep, 0.75)) |>
mutate(Weekday = factor(Weekday, levels=c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday")))
View(weekday_summary)
weekday_summary <- all_ves_by_weekday |>
group_by(network, SiteID, Weekday) |>
summarise(total_weekday = sum(Total_ves_dep),
median_ves_weekday = median(Total_ves_dep),
weekday_lower = quantile(Total_ves_dep, 0.25),
weekday_upper = quantile(Total_ves_dep, 0.75),
total_ins_weekday = sum(Total_inside_ves_dep),
median_ins_ves_weekday = median(Total_inside_ves_dep),
weekday_ins_lower = quantile(Total_inside_ves_dep, 0.25),
weekday_ins_upper = quantile(Total_inside_ves_dep, 0.75)) |>
mutate(Weekday = factor(Weekday, levels=c("M","T","W","R","F","Sa","Su")))
View(weekday_summary)
weekday_summary <- all_ves_by_weekday |>
group_by(network, SiteID, Weekday) |>
summarise(total_weekday = sum(Total_ves_dep),
median_ves_weekday = median(Total_ves_dep),
weekday_lower = quantile(Total_ves_dep, 0.25),
weekday_upper = quantile(Total_ves_dep, 0.75),
total_ins_weekday = sum(Total_inside_ves_dep),
median_ins_ves_weekday = median(Total_inside_ves_dep),
weekday_ins_lower = quantile(Total_inside_ves_dep, 0.25),
weekday_ins_upper = quantile(Total_inside_ves_dep, 0.75)) |>
mutate(Weekday = factor(Weekday, levels=c("M","T","W","R","F","Sa","Su")))
all_perc_weekday <- all_sites_hp |>
# group by date
group_by(network, SiteID, Weekday, ves_yn) |>
# get total number of hours for Y and N groups per each hour per deployment
summarize(n_hours = n())|>
mutate(freq = n_hours/sum(n_hours)) |>
ungroup() |>
complete(SiteID, Weekday, ves_yn,
fill = list(ves_yn = "Y", freq = 0)) |>
group_by(SiteID, Weekday, ves_yn) |>
# reshape for easier plotting
pivot_longer(cols = c("freq"),
values_to = "Perc_per_hour")
# total vessels per week
weekly_ves <- all_sites_hp |>
mutate(iso_week = isoweek(Begin_Date_loc)) |>
group_by(network, SiteID, iso_week) |>
summarize(mean_ves = mean(Total_Vessels, na.rm = TRUE),
med_ves = median(Total_Vessels, na.rm = TRUE),
sd_ves = sd(Total_Vessels, na.rm = TRUE),
sd_lower = mean_ves - (0.5*sd_ves),
sd_upper = mean_ves + (0.5*sd_ves))
# total vessels & summary stats per day
daily_ves <- all_sites_hp |>
group_by(network, SiteID, Date_noyr) |>
summarize(mean_ves = mean(Total_Vessels, na.rm = TRUE),
med_ves = median(Total_Vessels, na.rm = TRUE),
sd_ves = sd(Total_Vessels, na.rm = TRUE),
sd_lower = mean_ves - (0.5*sd_ves),
sd_upper = mean_ves + (0.5*sd_ves))
# test plot to check whether weekday ordering worked
ggplot(data = weekday_summary,
mapping = aes(x = Weekday,
y = median_ves_weekday)) +
geom_col() +
geom_linerange(aes(ymin = weekday_lower,
ymax = weekday_upper))+
facet_wrap(~SiteID) +
theme_bw()
# test plot to check whether weekday ordering worked
ggplot(data = weekday_summary,
mapping = aes(x = Weekday,
y = median_ves_weekday)) +
geom_boxplot() +
facet_wrap(~SiteID) +
theme_bw()
# test plot to check whether weekday ordering worked
ggplot(data = weekday_summary,
mapping = aes(x = Weekday,
y = median_ves_weekday)) +
geom_col() +
geom_linerange(aes(ymin = weekday_lower,
ymax = weekday_upper))+
facet_wrap(~SiteID) +
theme_bw()
# test plot to check whether weekday ordering worked
ggplot(data = all_ves_by_weekday,
mapping = aes(x = Weekday,
y = Total_ves_dep)) +
geom_boxplot()+
facet_wrap(~SiteID, scales = "free_y") +
theme_bw()
# test plot to check whether weekday ordering worked
ggplot(data = all_ves_by_weekday,
mapping = aes(x = Weekday,
y = Total_ves_dep, color = network)) +
geom_boxplot()+
facet_wrap(~SiteID, scales = "free_y") +
theme_bw()
# test plot to check whether weekday ordering worked
ggplot(data = all_ves_by_weekday,
mapping = aes(x = Weekday,
y = Total_ves_dep, color = network)) +
geom_boxplot()+
facet_wrap(~c(network,SiteID), scales = "free_y") +
theme_bw()
# test plot to check whether weekday ordering worked
ggplot(data = all_ves_by_weekday,
mapping = aes(x = Weekday,
y = Total_ves_dep, color = network)) +
geom_boxplot()+
facet_wrap(~c(network), scales = "free_y") +
theme_bw()
# test plot to check whether weekday ordering worked
ggplot(data = all_ves_by_weekday,
mapping = aes(x = Weekday,
y = Total_ves_dep, color = network)) +
geom_boxplot()+
facet_wrap(~c(network)) +
theme_bw()
ggsave("Figures/weekday_by_network_boxplot.jpg", device = "jpeg",
width=10, height=8, units="in", dpi=300)
library(ggdist)
# start with boxplot
ggplot(data = all_ves_by_weekday,
mapping = aes(x = Weekday,
y = Total_ves_dep,
color = network)) +
# add half violin to plot alongside boxplot
ggdist::stat_halfeye(aes(fill = network),
alpha = 0.5,
width = 0.4, # adjust height
# justification = -0.2, # move to the right
# .width = 0 # remove slab interval
)+
# add skinny boxplot
geom_boxplot(width = 0.15,
alpha = 0.3,
outlier.colour = NA)+
# add rain to raincloud
ggdist::stat_dots(
aes(fill = network),
# point to the left
side = "left",
# move to the left
justification = 1.1,
binwidth = 0.1,
layout = "hex",
overflow = "compress") +
facet_grid(rows = vars(network),
scales = "free_y") +
theme_bw()
ggsave("Figures/weekday_by_network_raincloud.jpg", device = "jpeg",
width=10, height=8, units="in", dpi=300)
### Weekday inside
# test plot to check whether weekday ordering worked
ggplot(data = all_ves_by_weekday,
mapping = aes(x = Weekday,
y = Total_inside_ves_per_day)) +
geom_boxplot() +
# geom_linerange(aes(ymin = weekday_ins_lower,
#                    ymax = weekday_ins_upper))+
facet_wrap(~SiteID) +
theme_bw()
### Weekday inside
# test plot to check whether weekday ordering worked
ggplot(data = all_ves_by_weekday,
mapping = aes(x = Weekday,
y = Total_inside_ves_per_day)) +
geom_boxplot() +
# geom_linerange(aes(ymin = weekday_ins_lower,
#                    ymax = weekday_ins_upper))+
facet_wrap(~network) +
theme_bw()
### Weekday inside
# test plot to check whether weekday ordering worked
ggplot(data = all_ves_by_weekday,
mapping = aes(x = Weekday,
y = Total_inside_ves_per_day)) +
geom_boxplot() +
# geom_linerange(aes(ymin = weekday_ins_lower,
#                    ymax = weekday_ins_upper))+
facet_wrap(~SiteID) +
theme_bw()
# Save figure
ggsave("Figures/inside_weekday_by_site_boxplot.jpg", device = "jpeg",
width=10, height=8, units="in", dpi=300)
# Save figure
ggsave("Figures/inside_weekday_by_network_boxplot.jpg", device = "jpeg",
width=10, height=8, units="in", dpi=300)
# Save figure
ggsave("Figures/inside_weekday_by_site_boxplot.jpg", device = "jpeg",
width=10, height=8, units="in", dpi=300)
# By site
ggplot(data = all_ves_by_weekday,
mapping = aes(x = Weekday,
y = Total_inside_ves_per_day)) +
geom_boxplot() +
# geom_linerange(aes(ymin = weekday_ins_lower,
#                    ymax = weekday_ins_upper))+
facet_wrap(~network) +
theme_bw()
# Save figure
ggsave("Figures/inside_weekday_by_network_boxplot.jpg", device = "jpeg",
width=10, height=8, units="in", dpi=300)
# NOAA-approved tidyverse
tidyverse_short<-c("broom","cli","crayon","dbplyr","dplyr","dtplyr","forcats","ggplot2","googledrive","googlesheets4","hms","httr","jsonlite","lubridate","magrittr","modelr","pillar","purrr","readr","readxl","reprex","rlang","rstudioapi","rvest","stringr","tibble","tidyr","xml2")
lapply(tidyverse_short, require, character.only = TRUE)
# source helper file with various data wrangling functions
source("scripts/AMP_summary_ves_funs.R")
##### Deployment info ###
site_id <- dlg_input(message = "Site ID, e.g. 'TRE'")$res
dep_id <- dlg_input(message = "Deployment ID, YYYYMM")$res
# Start and end dates of deployment
start_dep_date <- as_date(dlg_input(message = "Start date: YYYY-MM-DD")$res)
end_dep_date <- as_date(dlg_input(message = "End date: YYYY-MM-DD")$res)
#### Compile Vessel Selections from Raven ####
all_selns <- Compile_Raven_selns(site_id = site_id,
dep_id = dep_id)
all_selns_prev <- read.delim("data_inputs/Compiled_vessel_selections/CGMP_201807_all_vessel_selections_UTC+10.txt")
all_selns_prev <- read.delim(file = "data_inputs/Compiled_vessel_selections/CGMP_201807_all_vessel_selections_UTC+10.txt")
View(all_selns_prev)
all_selns_hr <- all_selns |>
mutate(Begin_Clock = as_datetime(Begin_Clock, format = "%H:%M:%OS"),
End_Clock = as_datetime(End_Clock, format = "%H:%M:%OS"),
Begin_Date = as_datetime(Begin_Date, format = "%Y/%m/%d"),
Begin_Hour = hour(Begin_Clock),
End_Hour = hour(End_Clock),
# re-code anything with a maneuver as "Maneuver" (e.g., "Maneuver+CPA" = "Maneuver")
Behavior = gsub(pattern = ".*Maneuver.*", replacement = "Maneuver", x = Behavior),
# re-code all transit as "Transit" (e.g., "TransitA" = "Transit")
# important that this happens AFTER the Maneuver line above so that "TransitAManeuver" doesn't get re-coded
Behavior = gsub(pattern = ".*Transit.*", replacement = "Transit", x = Behavior),
Behavior = gsub(pattern = "CPAManeuver", replacement = "Maneuver", x = Behavior),
Behavior = gsub(pattern = "CPA", replacement = "Transit", x = Behavior),
Behavior = gsub(pattern = " ", replacement = "", x = Behavior),
Behavior = na_if(Behavior, ""),
Behavior = replace_na(Behavior, "Not_Assigned"))
View(all_selns_hr)
View(all_selns)
#### Compile Vessel Selections from Raven ####
all_selns <- Compile_Raven_selns(site_id = site_id,
dep_id = dep_id)
# Save compiled selection table in outputs folder
write.table(all_selns,
paste0("outputs/", site_id,"_",dep_id,"_all_vessel_selections.txt"),
row.names = FALSE)
# Save compiled selection table in outputs folder
write.table(all_selns,
paste0("data_outputs/", site_id,"_",dep_id,"_all_vessel_selections.txt"),
row.names = FALSE)
#### Compile Vessel Selections from Raven ####
all_selns <- Compile_Raven_selns(site_id = site_id,
dep_id = dep_id)
# Save compiled selection table in outputs folder
write.table(all_selns,
paste0("data_outputs/", site_id,"_",dep_id,"_all_vessel_selections.txt"),
row.names = FALSE)
all_selns_hr <- all_selns |>
mutate(Begin_Clock = as_datetime(Begin_Clock, format = "%H:%M:%OS"),
End_Clock = as_datetime(End_Clock, format = "%H:%M:%OS"),
Begin_Date = as_datetime(Begin_Date, format = "%Y/%m/%d"),
Begin_Hour = hour(Begin_Clock),
End_Hour = hour(End_Clock),
# re-code anything with a maneuver as "Maneuver" (e.g., "Maneuver+CPA" = "Maneuver")
Behavior = gsub(pattern = ".*Maneuver.*", replacement = "Maneuver", x = Behavior),
# re-code all transit as "Transit" (e.g., "TransitA" = "Transit")
# important that this happens AFTER the Maneuver line above so that "TransitAManeuver" doesn't get re-coded
Behavior = gsub(pattern = ".*Transit.*", replacement = "Transit", x = Behavior),
Behavior = gsub(pattern = "CPAManeuver", replacement = "Maneuver", x = Behavior),
Behavior = gsub(pattern = "CPA", replacement = "Transit", x = Behavior),
Behavior = gsub(pattern = " ", replacement = "", x = Behavior),
Behavior = na_if(Behavior, ""),
Behavior = replace_na(Behavior, "Not_Assigned"))
# Count instances of each behavior per date-hour
hr_tally <- all_selns_hr |>
mutate(Behavior = as.factor(Behavior)) |>
group_by(Behavior, Begin_Date, Begin_Hour) |>
count() |>
# pivot wider to get behavs as columns and fill missing values with 0
pivot_wider(names_from = Behavior,
values_from = n,
values_fill = 0)
# create a new df with all hours for the whole deployment
date_range_dep <- seq.Date(from = start_dep_date, to = end_dep_date, by = "day") |>
crossing(seq(0,23,1))
# rename columns
names(date_range_dep) <- c("Begin_Date","Begin_Hour")
# join 2 data frames together to add behavior tally
hourly_pres <- date_range_dep |>
left_join(hr_tally, by = c("Begin_Date","Begin_Hour")) |>
replace_na(list(Transit = 0, Maneuver = 0))
# bring in Notes from all_selns_hr
seln_notes <- aggregate(Notes ~ Begin_Date + Begin_Hour, data = all_selns_hr, paste0, collapse = "; ") |>
# get rid of blank entries for notes
filter(Notes != "" & Notes != "; ")
hourly_pres_notes <- hourly_pres |>
left_join(seln_notes, by = c("Begin_Date","Begin_Hour")) |>
mutate(SiteID = site_id)
View(hourly_pres_notes)
write.csv(hourly_pres_notes,
paste0("outputs/",site_id,"_",dep_id,"_Vessel_Hourly_Presence.csv"))
write.csv(hourly_pres_notes,
paste0("data_outputs/",site_id,"_",dep_id,"_Vessel_Hourly_Presence.csv"))
?across
# Since server folders are in a standard structure, use parent folder to get list of all deployments
dep_names <- list.dirs(tk_choose.dir(caption = "Select parent dir for all deployment folders"), recursive = FALSE, full.names = FALSE)
# select the deployment(s) to be plotted
dep_list <- dlg_list(title = "Select deployments to plot", choices = dep_names, multiple = TRUE)$res |>
str_sub(start = 16)
# apply getDeploymentInfo() from AMP_pkgs_funs.R to each deployment
#   prompts user for site name, start/end date, and time zones
dep_info <- dep_list |>
map(~getDeploymentInfo(.)) |>
set_names(dep_list)
# Load data ---------------------------------------------------------------
# For each deployment in the dep_info list, load in hourly presence table & compiled selection table
hp_og <- dep_info |>
map(~read_csv(choose.files(caption = paste0({.}$site_id, {.}$dep_id, " Hourly Presence sheet .csv"))))|>
# use imap() to get info based on index of each iteration
# in this case, we want the name of the list element, designated as ".y"
imap(~mutate(., Dep_ID = .y))
# For each deployment in the dep_info list, load in compiled selection table
selns_og <- dep_info |>
map(~read_delim(choose.files(caption = paste0({.}$site_id, {.}$dep_id, " Complied seln table .txt"))))|>
# use imap() to get info based on index of each iteration
# in this case, we want the name of the list element, designated as ".y"
imap(~mutate(., Dep_ID = .y))
# For each deployment in the dep_info list, load in I-O excel files
ins_out_og <- dep_info |>
map(~read_xlsx(choose.files(caption = paste0({.}$site_id, {.}$dep_id, " I-O table .xlsx"))))|>
# use imap() to get info based on index of each iteration
# in this case, we want the name of the list element, designated as ".y"
imap(~mutate(., Dep_ID = .y))
# Mutate data ------------------------------------------------------------
#### Add some columns, update time zone ####
# making new_cols placeholders to add into original df if they don't exist
new_cols <- c("Maneuver" = 0,"Transit" = 0, "Not_Assigned" = 0)
hp_allcols <- hp_og |>
# add columns for Transit and Maneuver if they don't exist
map(~add_column(., !!!new_cols[!names(new_cols) %in% names(.)])
)
# Hourly presence
hp_data <- hp_allcols |>
map(~rename(.,
any_of(c("TR" = "Transit",
"M" = "Maneuver",
"Dep" = "Dep_ID")))) |>
map(~relocate(.,
TR, .after = last_col())) |>
map(~relocate(.,
Not_Assigned, .after = last_col())) |>
map(~relocate(.,
M, .after = last_col())) |>
map2(.y = dep_info,
~mutate(.x,
Site_ID = {.y}$site_id,
Dep_ID = {.y}$dep_id,
Total_Vessels = rowSums(across(TR:M)),
# create y/n column for vessel presence
ves_yn = ifelse(Total_Vessels == 0, "N", "Y"),
# pull hour as time object along with date
Hr_time = paste(Begin_Date, Begin_Hour, ":00"),
# get components of date-time object and assign time zone
Hr_time = parse_date_time(Hr_time, "ymd H:M", tz = {.y}$tz_files),
# change to local time zone
Hr_local = with_tz(Hr_time, tzone = {.y}$tz_local),
# pull out new hour and date in local time
Begin_Hour_loc = as.numeric(hour(Hr_local)),
Begin_Date_loc = date(Hr_local),
# add weekday column
Weekday = weekdays(Begin_Date_loc))) |>
bind_rows()
View(hp_data)
##### Deployment info ###
site_id <- dlg_input(message = "Site ID, e.g. 'TRE'")$res
dep_id <- dlg_input(message = "Deployment ID, YYYYMM")$res
# Start and end dates of deployment
start_dep_date <- as_date(dlg_input(message = "Start date: YYYY-MM-DD")$res)
end_dep_date <- as_date(dlg_input(message = "End date: YYYY-MM-DD")$res)
#### Compile Vessel Selections from Raven ####
all_selns <- Compile_Raven_selns(site_id = site_id,
dep_id = dep_id)
View(all_selns)
unique(all_selns$Behavior)
which(all_selns$Behavior == "LTransitSA")
View(dep_info)
# reshape selection tables to plot duration
selns_data <- selns_og |>
map(~rename(., "Dep" = "Dep_ID")) |>
map2(.y = dep_info,
~mutate(.x,
Begin_Date = ymd(Begin_Date),
Begin_file_date = ymd(Begin_file_date),
Site_ID = {.y}$site_id,
# Dep = {.y}$dep_id,
# re-code anything with a maneuver as "Maneuver" (e.g., "Maneuver+CPA" = "Maneuver")
Behavior = gsub(pattern = ".*Maneuver.*", replacement = "Maneuver", x = Behavior),
# re-code all transit as "Transit" (e.g., "TransitA" = "Transit")
# important that this happens AFTER the Maneuver line above so that "TransitAManeuver" doesn't get re-coded
Behavior = gsub(pattern = ".*Transit.*", replacement = "Transit", x = Behavior),
Behavior = gsub(pattern = "CPAManeuver", replacement = "Maneuver", x = Behavior),
Behavior = gsub(pattern = "CPA", replacement = "Transit", x = Behavior),
Behavior = gsub(pattern = " ", replacement = "", x = Behavior),
DeltaHours = Delta_Time_s/3600,
# Total_Vessels = rowSums(across(c(TR,M))),
# pull hour as time object along with date
Hr_time = paste(Begin_Date, Begin_Clock),
# get components of date-time object and assign time zone
Hr_time = parse_date_time(Hr_time, "y/m/d H:M:S", tz = {.y}$tz_files),
# change to local time zone
Hr_local = with_tz(Hr_time, tzone = {.y}$tz_local),
# pull out new hour and date in local time
Begin_Hour_loc = as.numeric(hour(Hr_local)),
Begin_Date_loc = date(Hr_local),
# add weekday column
Weekday = weekdays(Begin_Date_loc))) |>
bind_rows()
View(selns_data)
hp_data <- hp_allcols |>
map(~rename(.,
any_of(c("TR" = "Transit",
"M" = "Maneuver",
"Dep" = "Dep_ID")))) |>
map(~relocate(.,
TR, .after = last_col())) |>
map(~relocate(.,
Not_Assigned, .after = last_col())) |>
map(~relocate(.,
M, .after = last_col()))
View(hp_data)
View(hp_data)
# Hourly presence
hp_data <- hp_allcols |>
map(~rename(.,
any_of(c("TR" = "Transit",
"M" = "Maneuver",
"Dep" = "Dep_ID")))) |>
map(~relocate(.,
TR, .after = last_col())) |>
map(~relocate(.,
Not_Assigned, .after = last_col())) |>
map(~relocate(.,
M, .after = last_col())) |>
map2(.y = dep_info,
~mutate(.x,
Site_ID = {.y}$site_id,
Dep_ID = {.y}$dep_id,
Total_Vessels = rowSums(across(TR:M)),
# create y/n column for vessel presence
ves_yn = ifelse(Total_Vessels == 0, "N", "Y"),
# pull hour as time object along with date
Hr_time = paste(Begin_Date, Begin_Hour, ":00"),
# get components of date-time object and assign time zone
Hr_time = parse_date_time(Hr_time, "ymd H:M", tz = {.y}$tz_files),
# change to local time zone
Hr_local = with_tz(Hr_time, tzone = {.y}$tz_local),
# pull out new hour and date in local time
Begin_Hour_loc = as.numeric(hour(Hr_local)),
Begin_Date_loc = date(Hr_local),
# add weekday column
Weekday = weekdays(Begin_Date_loc))) |>
bind_rows()
hp_allcols_df <- hp_allcols |> bind_rows()
View(hp_allcols_df)
new_cols <- c("Maneuver" = 0,"Transit" = 0, "Not_Assigned" = 0)
hp_allcols <- hp_og |>
# add columns for Transit and Maneuver if they don't exist
map(~add_column(., !!!new_cols[!names(new_cols) %in% names(.)])
)
hp_allcols_df <- hp_allcols |> bind_rows()
View(hp_allcols_df)
View(all_selns)
all_selns_hr <- all_selns |>
mutate(Begin_Clock = as_datetime(Begin_Clock, format = "%H:%M:%OS"),
End_Clock = as_datetime(End_Clock, format = "%H:%M:%OS"),
Begin_Date = as_datetime(Begin_Date, format = "%Y/%m/%d"),
Begin_Hour = hour(Begin_Clock),
End_Hour = hour(End_Clock),
# re-code anything with a maneuver as "Maneuver" (e.g., "Maneuver+CPA" = "Maneuver")
Behavior = gsub(pattern = ".*Maneuver.*", replacement = "Maneuver", x = Behavior),
# re-code all transit as "Transit" (e.g., "TransitA" = "Transit")
# important that this happens AFTER the Maneuver line above so that "TransitAManeuver" doesn't get re-coded
Behavior = gsub(pattern = ".*Transit.*", replacement = "Transit", x = Behavior),
Behavior = gsub(pattern = "CPAManeuver", replacement = "Maneuver", x = Behavior),
Behavior = gsub(pattern = "CPA", replacement = "Transit", x = Behavior),
Behavior = gsub(pattern = " ", replacement = "", x = Behavior),
Behavior = na_if(Behavior, ""),
Behavior = replace_na(Behavior, "Not_Assigned"))
View(all_selns_hr)
# Count instances of each behavior per date-hour
hr_tally <- all_selns_hr |>
mutate(Behavior = as.factor(Behavior)) |>
group_by(Behavior, Begin_Date, Begin_Hour) |>
count() |>
# pivot wider to get behavs as columns and fill missing values with 0
pivot_wider(names_from = Behavior,
values_from = n,
values_fill = 0)
View(hr_tally)
# create a new df with all hours for the whole deployment
date_range_dep <- seq.Date(from = start_dep_date, to = end_dep_date, by = "day") |>
crossing(seq(0,23,1))
# rename columns
names(date_range_dep) <- c("Begin_Date","Begin_Hour")
# join 2 data frames together to add behavior tally
hourly_pres <- date_range_dep |>
left_join(hr_tally, by = c("Begin_Date","Begin_Hour")) |>
replace_na(list(Transit = 0, Maneuver = 0))
# bring in Notes from all_selns_hr
seln_notes <- aggregate(Notes ~ Begin_Date + Begin_Hour, data = all_selns_hr, paste0, collapse = "; ") |>
# get rid of blank entries for notes
filter(Notes != "" & Notes != "; ")
hourly_pres_notes <- hourly_pres |>
left_join(seln_notes, by = c("Begin_Date","Begin_Hour")) |>
mutate(SiteID = site_id)
