# Save figure
ggsave("Figures/inside_weekday_by_site_boxplot.jpg", device = "jpeg",
width=10, height=8, units="in", dpi=300)
#### Polar plot diel ####
ggplot(data = all_diel_perc |>
filter(ves_yn=="Y"), # only plot 'yes' proportions
aes(x=Begin_Hour_loc,
y = Perc_per_hour,
fill = Perc_per_hour,))+
geom_line(aes(group = SiteID))+
coord_polar(theta = "x", start = 0) +
# scale_fill_viridis_c(labels = label_number(accuracy = 0.01),
#                      begin = 0, end = 1, limits = c(0,1),
#                      breaks = c(0,0.25,0.5,0.75,1),
#                      option = "B")+
scale_x_continuous(breaks=seq(0,23,4),
minor_breaks = seq(0:23),
expand = c(0,0)) +
# scale_y_continuous(limits=c(0,1),
#                    breaks=seq(0,1,0.25),
#                    expand = c(0, 0)) +
ylab("N hours present / Total deployment Hours") +
# ylim(0,1)+
xlab("Hour")+
theme(text=element_text(size=20),
strip.background = element_rect(color = "white", fill = "black"),
strip.text.x = element_text(colour = "white", face = "bold"),
strip.text.y = element_text(colour = "white", face = "bold"),
plot.title = element_text(hjust = 0.5))+
#R turns the proportion values into bins in the legend when I change the title, so I'm removing it instead
theme(legend.title=element_blank()) +
facet_wrap(facets = vars(SiteID), nrow = 3,
scales = "free_y")
ggplot(all_sites_hp,
aes(x = day_index,
y = Begin_Hour_loc,
fill= Total_Vessels)) +
geom_tile()+
scale_fill_viridis_c()+
facet_grid(rows = vars(SiteID), scales = "free_x")+
ylab("Begin Hour")+
xlab("Julian Day")+
ggtitle("Vessel Activity")+
# scale_x_date(
#   name="Julian Day",
#   date_breaks="1 month",
#   date_labels="%b",
#   expand=expansion(0,0))+
theme(text=element_text(size=18),
strip.background = element_rect(color = "white", fill = "black"),
strip.text.x = element_text(colour = "white", face = "bold"),
strip.text.y = element_text(colour = "white", face = "bold"),
plot.title = element_text(hjust = 0.5))
ggplot(all_sites_hp,
aes(x = Date_noyr,
y = Begin_Hour_loc,
fill= Total_Vessels)) +
geom_tile()+
scale_fill_viridis_c()+
facet_grid(rows = vars(SiteID), scales = "free_x")+
ylab("Begin Hour")+
xlab("Date")+
ggtitle("Vessel Activity")+
# scale_x_date(
#   name="Julian Day",
#   date_breaks="1 month",
#   date_labels="%b",
#   expand=expansion(0,0))+
theme(text=element_text(size=18),
strip.background = element_rect(color = "white", fill = "black"),
strip.text.x = element_text(colour = "white", face = "bold"),
strip.text.y = element_text(colour = "white", face = "bold"),
plot.title = element_text(hjust = 0.5))
ggplot(all_sites_hp,
aes(x = Date_noyr |> filter(SiteID == "JNE"),
y = Begin_Hour_loc,
fill= Total_Vessels)) +
geom_tile()+
scale_fill_viridis_c()+
facet_grid(rows = vars(SiteID), scales = "free_x")+
ylab("Begin Hour")+
xlab("Date")+
ggtitle("Vessel Activity")+
# scale_x_date(
#   name="Julian Day",
#   date_breaks="1 month",
#   date_labels="%b",
#   expand=expansion(0,0))+
theme(text=element_text(size=18),
strip.background = element_rect(color = "white", fill = "black"),
strip.text.x = element_text(colour = "white", face = "bold"),
strip.text.y = element_text(colour = "white", face = "bold"),
plot.title = element_text(hjust = 0.5))
ggplot(all_sites_hp|> filter(SiteID == "JNE"),
aes(x = Date_noyr ,
y = Begin_Hour_loc,
fill= Total_Vessels)) +
geom_tile()+
scale_fill_viridis_c()+
facet_grid(rows = vars(SiteID), scales = "free_x")+
ylab("Begin Hour")+
xlab("Date")+
ggtitle("Vessel Activity")+
# scale_x_date(
#   name="Julian Day",
#   date_breaks="1 month",
#   date_labels="%b",
#   expand=expansion(0,0))+
theme(text=element_text(size=18),
strip.background = element_rect(color = "white", fill = "black"),
strip.text.x = element_text(colour = "white", face = "bold"),
strip.text.y = element_text(colour = "white", face = "bold"),
plot.title = element_text(hjust = 0.5))
ggplot(all_sites_hp|> filter(SiteID == "GEO"),
aes(x = Date_noyr ,
y = Begin_Hour_loc,
fill= Total_Vessels)) +
geom_tile()+
scale_fill_viridis_c()+
facet_grid(rows = vars(SiteID), scales = "free_x")+
ylab("Begin Hour")+
xlab("Date")+
ggtitle("Vessel Activity")+
# scale_x_date(
#   name="Julian Day",
#   date_breaks="1 month",
#   date_labels="%b",
#   expand=expansion(0,0))+
theme(text=element_text(size=18),
strip.background = element_rect(color = "white", fill = "black"),
strip.text.x = element_text(colour = "white", face = "bold"),
strip.text.y = element_text(colour = "white", face = "bold"),
plot.title = element_text(hjust = 0.5))
# Save figure
ggsave("Figures/Diel_GEO_heatmap.jpg", device = "jpeg",
width=10, height=8, units="in", dpi=300)
ggplot(all_sites_hp,
aes(x = Date_noyr ,
y = Begin_Hour_loc,
fill= Total_Vessels)) +
geom_tile()+
scale_fill_viridis_c()+
facet_grid(rows = vars(SiteID), scales = "free_x")+
ylab("Begin Hour")+
xlab("Date")+
ggtitle("Vessel Activity")+
# scale_x_date(
#   name="Julian Day",
#   date_breaks="1 month",
#   date_labels="%b",
#   expand=expansion(0,0))+
theme(text=element_text(size=18),
strip.background = element_rect(color = "white", fill = "black"),
strip.text.x = element_text(colour = "white", face = "bold"),
strip.text.y = element_text(colour = "white", face = "bold"),
plot.title = element_text(hjust = 0.5))
# Save figure
ggsave("Figures/Diel_allsites_heatmap.jpg", device = "jpeg",
width=10, height=8, units="in", dpi=300)
# ggtitle("Vessel Activity")+
# scale_x_date(
#   name="Julian Day",
#   date_breaks="1 month",
#   date_labels="%b",
#   expand=expansion(0,0))+
theme(text=element_text(size=18),
plot.title = element_text(hjust = 0.5)
y = Total_Vessels)) +
# boxplot diel
ggplot(all_sites_hp,
# boxplot diel
ggplot(data = all_sites_hp,
aes(x = Begin_Hour_loc,
y = Total_Vessels)) +
geom_boxplot()+
# scale_fill_viridis_c()+
facet_grid(rows = vars(SiteID), scales = "free_x")+
xlab("Begin Hour")+
xlab("Total Vessels")+
theme(text=element_text(size=18),
strip.background = element_rect(color = "white", fill = "black"),
strip.text.x = element_text(colour = "white", face = "bold"),
strip.text.y = element_text(colour = "white", face = "bold"),
plot.title = element_text(hjust = 0.5))
# boxplot diel
ggplot(data = all_sites_hp,
aes(x = Begin_Hour_loc,
y = Total_Vessels,
group = SiteID)) +
geom_boxplot()+
# scale_fill_viridis_c()+
facet_grid(rows = vars(SiteID), scales = "free_x")+
xlab("Begin Hour")+
xlab("Total Vessels")+
theme(text=element_text(size=18),
strip.background = element_rect(color = "white", fill = "black"),
strip.text.x = element_text(colour = "white", face = "bold"),
strip.text.y = element_text(colour = "white", face = "bold"),
plot.title = element_text(hjust = 0.5))
# boxplot diel
ggplot(data = all_sites_hp,
aes(x = as_factor(Begin_Hour_loc),
y = Total_Vessels)) +
geom_boxplot()+
# scale_fill_viridis_c()+
facet_grid(rows = vars(SiteID), scales = "free_x")+
xlab("Begin Hour")+
xlab("Total Vessels")+
theme(text=element_text(size=18),
strip.background = element_rect(color = "white", fill = "black"),
strip.text.x = element_text(colour = "white", face = "bold"),
strip.text.y = element_text(colour = "white", face = "bold"),
plot.title = element_text(hjust = 0.5))
# boxplot diel
ggplot(data = all_sites_hp,
aes(x = as_factor(Begin_Hour_loc),
y = Total_Vessels)) +
geom_boxplot()+
# scale_fill_viridis_c()+
facet_grid(vars(SiteID), scales = "free_x")+
xlab("Begin Hour")+
xlab("Total Vessels")+
theme(text=element_text(size=18),
strip.background = element_rect(color = "white", fill = "black"),
strip.text.x = element_text(colour = "white", face = "bold"),
strip.text.y = element_text(colour = "white", face = "bold"),
plot.title = element_text(hjust = 0.5))
# boxplot diel
ggplot(data = all_sites_hp,
aes(x = as_factor(Begin_Hour_loc),
y = Total_Vessels)) +
geom_bar()+
# scale_fill_viridis_c()+
facet_grid(vars(SiteID), scales = "free_x")+
xlab("Begin Hour")+
xlab("Total Vessels")+
theme(text=element_text(size=18),
strip.background = element_rect(color = "white", fill = "black"),
strip.text.x = element_text(colour = "white", face = "bold"),
strip.text.y = element_text(colour = "white", face = "bold"),
plot.title = element_text(hjust = 0.5))
# boxplot diel
ggplot(data = all_sites_hp,
aes(x = Begin_Hour_loc,
y = Total_Vessels)) +
geom_bar()+
# scale_fill_viridis_c()+
facet_grid(vars(SiteID), scales = "free_x")+
xlab("Begin Hour")+
xlab("Total Vessels")+
theme(text=element_text(size=18),
strip.background = element_rect(color = "white", fill = "black"),
strip.text.x = element_text(colour = "white", face = "bold"),
strip.text.y = element_text(colour = "white", face = "bold"),
plot.title = element_text(hjust = 0.5))
#### Inside vessels ####
# Add some inside/outside columns
all_ves_in_out <- all_sites_hp |>
mutate(trans_inside = replace_na(trans_inside, 0),
man_inside = replace_na(man_inside, 0),
total_inside = replace_na(total_inside, 0),
total_outside = Total_Vessels - total_inside)#|>
# reshape for stacked bar plot
# Add some inside/outside columns
ins_ves_by_site <- all_ves_by_site |>
mutate(Outside = Total_ves_dep - Total_inside_ves_dep) |>
rename("Inside" = "Total_inside_ves_dep") |>
pivot_longer(cols = c("Outside","Inside"),
names_to = "Total_ins_out",
values_to = "Total")
ins_diel_perc <- all_ves_in_out |>
mutate(ins_yn = ifelse(total_inside == 0, "N","Y"))|>
# group by Begin Hour to collapse into hours
group_by(SiteID, Begin_Hour_loc, ins_yn) |>
# get total number of hours for Y and N groups per each hour per deployment
summarize(n_hours = n())|>
mutate(freq = n_hours/sum(n_hours)) |>
ungroup() |>
complete(SiteID, Begin_Hour_loc, ins_yn,
fill = list(ins_yn = "Y", freq = 0)) |>
group_by(SiteID, Begin_Hour_loc, ins_yn) |>
# reshape for easier plotting
pivot_longer(cols = c("freq"),
values_to = "Perc_per_hour")
#### INSIDE Polar plot diel ####
ggplot(data=ins_diel_perc |>
filter(ins_yn=="Y"), # only plot 'yes' proportions
aes(x=Begin_Hour_loc,
y = Perc_per_hour,
fill = Perc_per_hour,))+
geom_bar(stat="identity")+
coord_polar(theta = "x", start = 0) +
scale_fill_viridis_c(labels = label_number(accuracy = 0.01),
begin = 0, end = 1, limits = c(0,1),
breaks = c(0,0.25,0.5,0.75,1),
option = "B")+
scale_x_continuous(breaks=seq(0,23,4),
minor_breaks = seq(0:23),
expand = c(0,0)) +
# scale_y_continuous(limits=c(0,1),
#                    breaks=seq(0,1,0.25),
#                    expand = c(0, 0)) +
ylab("N hours present inside / Total deployment Hours") +
# ylim(0,1)+
xlab("Hour")+
theme(text=element_text(size=20),
strip.background = element_rect(color = "white", fill = "black"),
strip.text.x = element_text(colour = "white", face = "bold"),
strip.text.y = element_text(colour = "white", face = "bold"),
plot.title = element_text(hjust = 0.5))+
#R turns the proportion values into bins in the legend when I change the title, so I'm removing it instead
theme(legend.title=element_blank()) +
facet_wrap(facets = vars(SiteID), nrow = 3,
scales = "free_y")
#### Load libraries ####
# NOAA-approved tidyverse
tidyverse_short<-c("broom","cli","crayon","dbplyr","dplyr","dtplyr","forcats","ggplot2","googledrive","googlesheets4","hms","httr","jsonlite","lubridate","magrittr","modelr","pillar","purrr","readr","readxl","reprex","rlang","rstudioapi","rvest","stringr","tibble","tidyr","xml2")
lapply(tidyverse_short, require, character.only = TRUE)
# source helper file
source("scripts/AMP_summary_ves_funs.R")
#### Load in data ####
# Assign user-defined inputs ----------------------------------------------
# Since server folders are in a standard structure, use parent folder to get list of all deployments
dep_names <- list.dirs(tk_choose.dir(caption = "Select parent dir for all deployment folders"), recursive = FALSE, full.names = FALSE)
# select the deployment(s) to be plotted
dep_list <- dlg_list(title = "Select deployments to plot", choices = dep_names, multiple = TRUE)$res |>
str_sub(start = 16)
# apply getDeploymentInfo() from AMP_pkgs_funs.R to each deployment
#   prompts user for site name, start/end date, and time zones
dep_info <- dep_list |>
map(~getDeploymentInfo(.)) |>
set_names(dep_list)
# Load data ---------------------------------------------------------------
# For each deployment in the dep_info list, load in hourly presence table & compiled selection table
hp_og <- dep_info |>
map(~read_csv(choose.files(caption = paste0({.}$site_id, {.}$dep_id, " Hourly Presence sheet .csv"))))|>
# use imap() to get info based on index of each iteration
# in this case, we want the name of the list element, designated as ".y"
imap(~mutate(., Dep_ID = .y))
# For each deployment in the dep_info list, load in compiled selection table
selns_og <- dep_info |>
map(~read_delim(choose.files(caption = paste0({.}$site_id, {.}$dep_id, " Complied seln table .txt"))))|>
# use imap() to get info based on index of each iteration
# in this case, we want the name of the list element, designated as ".y"
imap(~mutate(., Dep_ID = .y))
# For each deployment in the dep_info list, load in I-O excel files
ins_out_og <- dep_info |>
map(~read_xlsx(choose.files(caption = paste0({.}$site_id, {.}$dep_id, " I-O table .xlsx"))))|>
# use imap() to get info based on index of each iteration
# in this case, we want the name of the list element, designated as ".y"
imap(~mutate(., Dep_ID = .y))
# Mutate data ------------------------------------------------------------
#### Add some columns, update time zone ####
# making this to be able to add column names
new_cols <- c("Maneuver" = 0,"Transit" = 0, "Not_Assigned" = 0)
hp_allcols <- hp_og |>
# add columns for Transit and Maneuver if they don't exist
map(~add_column(., !!!new_cols[!names(new_cols) %in% names(.)])
)
# Hourly presence
hp_data <- hp_allcols |>
map(~rename(.,
any_of(c("TR" = "Transit",
"M" = "Maneuver",
"Dep" = "Dep_ID")))) |>
map(~relocate(.,
TR, .after = last_col())) |>
map(~relocate(.,
Not_Assigned, .after = last_col())) |>
map(~relocate(.,
M, .after = last_col())) |>
map2(.y = dep_info,
~mutate(.x,
Site_ID = {.y}$site_id,
Dep_ID = {.y}$dep_id,
Total_Vessels = rowSums(across(c(TR, M))),
# create y/n column for vessel presence
ves_yn = ifelse(Total_Vessels == 0, "N", "Y"),
# pull hour as time object along with date
Hr_time = paste(Begin_Date, Begin_Hour, ":00"),
# get components of date-time object and assign time zone
Hr_time = parse_date_time(Hr_time, "ymd H:M", tz = {.y}$tz_files),
# change to local time zone
Hr_local = with_tz(Hr_time, tzone = {.y}$tz_local),
# pull out new hour and date in local time
Begin_Hour_loc = as.numeric(hour(Hr_local)),
Begin_Date_loc = date(Hr_local),
# add weekday column
Weekday = weekdays(Begin_Date_loc))) |>
bind_rows()
# Create CSV to make data input easier. Maybe eventually add some logic in script to bypass generating this?
write_csv(hp_data, "data_outputs/total_ves_hp_by_site.csv")
# Selection tables --------------------------------------------------------
# reshape selection tables to plot duration
selns_data <- selns_og |>
map(~rename(., "Dep" = "Dep_ID")) |>
map2(.y = dep_info,
~mutate(.x,
Begin_Date = ymd(Begin_Date),
Begin_file_date = ymd(Begin_file_date),
Site_ID = {.y}$site_id,
# Dep = {.y}$dep_id,
# re-code anything with a maneuver as "Maneuver" (e.g., "Maneuver+CPA" = "Maneuver")
Behavior = gsub(pattern = ".*Maneuver.*", replacement = "Maneuver", x = Behavior),
# re-code all transit as "Transit" (e.g., "TransitA" = "Transit")
# important that this happens AFTER the Maneuver line above so that "TransitAManeuver" doesn't get re-coded
Behavior = gsub(pattern = ".*Transit.*", replacement = "Transit", x = Behavior),
Behavior = gsub(pattern = "CPAManeuver", replacement = "Maneuver", x = Behavior),
Behavior = gsub(pattern = "CPA", replacement = "Transit", x = Behavior),
Behavior = gsub(pattern = " ", replacement = "", x = Behavior),
DeltaHours = Delta_Time_s/3600,
# Total_Vessels = rowSums(across(c(TR,M))),
# pull hour as time object along with date
Hr_time = paste(Begin_Date, Begin_Clock),
# get components of date-time object and assign time zone
Hr_time = parse_date_time(Hr_time, "y/m/d H:M:S", tz = {.y}$tz_files),
# change to local time zone
Hr_local = with_tz(Hr_time, tzone = {.y}$tz_local),
# pull out new hour and date in local time
Begin_Hour_loc = as.numeric(hour(Hr_local)),
Begin_Date_loc = date(Hr_local),
# add weekday column
Weekday = weekdays(Begin_Date_loc))) |>
bind_rows()
# write csv for easier input later
write.csv(selns_data, "data_outputs/total_ves_selns_data_by_site.csv")
# Bind rows to get df for inside-outside tables
# don't need to do other adjustments for time zone etc bc will join with selns_data which has
# Begin_hour_loc and Begin_date_loc fields
ins_out_data <- ins_out_og |>
map(~select(., Filename, Date, Selection, used, pins_sm, pins_med, pins_lg, pins_ovrll, Dep_ID)) |>
map(~mutate(., Date = as.numeric(Date),
Date = as.character(Date))) |>
bind_rows()
# write csv for easier input later
write.csv(ins_out_data, "data_outputs/total_ves_ins_out_by_site.csv")
# NOAA-approved tidyverse
tidyverse_short<-c("broom","cli","crayon","dbplyr","dplyr","dtplyr","forcats","ggplot2","googledrive","googlesheets4","hms","httr","jsonlite","lubridate","magrittr","modelr","pillar","purrr","readr","readxl","reprex","rlang","rstudioapi","rvest","stringr","tibble","tidyr","xml2")
lapply(tidyverse_short, require, character.only = TRUE)
library(svDialogs)
library(tcltk)
#############################################################
#### User-defined variables - UPDATE FOR EACH DEPLOYMENT ####
##### Deployment info ###
site_id <- dlg_input(message = "Site ID, e.g. 'TRE'")$res
dep_id <- dlg_input(message = "Deployment ID, YYYYMM")$res
# Start and end dates of deployment
start_dep_date <- as_date(dlg_input(message = "Start date: YYYY-MM-DD")$res)
end_dep_date <- as_date(dlg_input(message = "End date: YYYY-MM-DD")$res)
#############################################################
#### source helper file w/functions
source("scripts/AMP_pkgs_funs.R")
#### Compile Vessel Selections from Raven ####
all_selns <- Compile_Raven_selns(site_id = site_id,
dep_id = dep_id)
#### Compile Vessel Selections from Raven ####
all_selns <- Compile_Raven_selns(site_id = site_id,
dep_id = dep_id)
View(all_selns)
# Save compiled selection table in outputs folder
write.table(all_selns,
paste0("outputs/", site_id,"_",dep_id,"_all_vessel_selections.txt"),
row.names = FALSE)
# Save compiled selection table in outputs folder
write.table(all_selns,
paste0("data_outputs/", site_id,"_",dep_id,"_all_vessel_selections.txt"),
row.names = FALSE)
all_selns_hr <- all_selns |>
mutate(Begin_Clock = as_datetime(Begin_Clock, format = "%H:%M:%OS"),
End_Clock = as_datetime(End_Clock, format = "%H:%M:%OS"),
Begin_Date = as_datetime(Begin_Date, format = "%Y/%m/%d"),
Begin_Hour = hour(Begin_Clock),
End_Hour = hour(End_Clock),
# re-code anything with a maneuver as "Maneuver" (e.g., "Maneuver+CPA" = "Maneuver")
Behavior = gsub(pattern = ".*Maneuver.*", replacement = "Maneuver", x = Behavior),
# re-code all transit as "Transit" (e.g., "TransitA" = "Transit")
# important that this happens AFTER the Maneuver line above so that "TransitAManeuver" doesn't get re-coded
Behavior = gsub(pattern = ".*Transit.*", replacement = "Transit", x = Behavior),
Behavior = gsub(pattern = "CPAManeuver", replacement = "Maneuver", x = Behavior),
Behavior = gsub(pattern = "CPA", replacement = "Transit", x = Behavior),
Behavior = gsub(pattern = " ", replacement = "", x = Behavior),
Behavior = na_if(Behavior, ""),
Behavior = replace_na(Behavior, "Not_Assigned"))
# Count instances of each behavior per date-hour
hr_tally <- all_selns_hr |>
mutate(Behavior = as.factor(Behavior)) |>
group_by(Behavior, Begin_Date, Begin_Hour) |>
count() |>
# pivot wider to get behavs as columns and fill missing values with 0
pivot_wider(names_from = Behavior,
values_from = n,
values_fill = 0)
# create a new df with all hours for the whole deployment
date_range_dep <- seq.Date(from = start_dep_date, to = end_dep_date, by = "day") |>
crossing(seq(0,23,1))
# rename columns
names(date_range_dep) <- c("Begin_Date","Begin_Hour")
# join 2 data frames together to add behavior tally
hourly_pres <- date_range_dep |>
left_join(hr_tally, by = c("Begin_Date","Begin_Hour")) |>
replace_na(list(Transit = 0, Maneuver = 0))
# bring in Notes from all_selns_hr
seln_notes <- aggregate(Notes ~ Begin_Date + Begin_Hour, data = all_selns_hr, paste0, collapse = "; ") |>
# get rid of blank entries for notes
filter(Notes != "" & Notes != "; ")
hourly_pres_notes <- hourly_pres |>
left_join(seln_notes, by = c("Begin_Date","Begin_Hour")) |>
mutate(SiteID = site_id)
write.csv(hourly_pres_notes,
paste0("outputs/",site_id,"_",dep_id,"_Vessel_Hourly_Presence.csv"))
write.csv(hourly_pres_notes,
paste0("data_outputs/",site_id,"_",dep_id,"_Vessel_Hourly_Presence.csv"))
